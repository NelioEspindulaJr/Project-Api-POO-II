CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

CREATE TABLE "Address" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Street" text NULL,
    "Number" text NULL,
    "City" text NULL,
    "State" text NULL,
    "Neighborhood" text NULL,
    "ZipCode" text NULL,
    "Complement" text NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Address" PRIMARY KEY ("Id")
);

CREATE TABLE "Category" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NULL,
    "Available" boolean NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Category" PRIMARY KEY ("Id")
);

CREATE TABLE "Discount" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Code" text NULL,
    "Description" text NULL,
    "DiscountPercent" numeric NOT NULL,
    "AvailableUses" integer NOT NULL,
    "Active" boolean NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Discount" PRIMARY KEY ("Id")
);

CREATE TABLE "User" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "FirstName" text NULL,
    "LastName" text NULL,
    "Email" text NULL,
    "Birthdate" timestamp with time zone NOT NULL,
    "Document" text NULL,
    "Type" text NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    "AddressId" integer NULL,
    CONSTRAINT "PK_User" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_User_Address_AddressId" FOREIGN KEY ("AddressId") REFERENCES "Address" ("Id")
);

CREATE TABLE "Order" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" integer NOT NULL,
    "Total" numeric NOT NULL,
    "Status" text NULL,
    "PaymentType" text NULL,
    "DiscountId" integer NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Order" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Order_Discount_DiscountId" FOREIGN KEY ("DiscountId") REFERENCES "Discount" ("Id"),      
    CONSTRAINT "FK_Order_User_UserId" FOREIGN KEY ("UserId") REFERENCES "User" ("Id") ON DELETE CASCADE     
);

CREATE TABLE "Payment" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Amount" numeric NOT NULL,
    "Provider" text NULL,
    "TransactionId" text NULL,
    "OrderId" integer NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Payment" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Payment_Order_OrderId" FOREIGN KEY ("OrderId") REFERENCES "Order" ("Id") ON DELETE CASCADE
);

CREATE TABLE "Product" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NULL,
    "Price" double precision NOT NULL,
    "SKU" text NULL,
    "Quantity" integer NOT NULL,
    "Available" boolean NOT NULL,
    "CategoryId" integer NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    "OrderId" integer NULL,
    CONSTRAINT "PK_Product" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_Product_Category_CategoryId" FOREIGN KEY ("CategoryId") REFERENCES "Category" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_Product_Order_OrderId" FOREIGN KEY ("OrderId") REFERENCES "Order" ("Id")
);

CREATE TABLE "OrderItem" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "OrderId" integer NOT NULL,
    "ProductId" integer NOT NULL,
    "Quantity" integer NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_OrderItem" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_OrderItem_Order_OrderId" FOREIGN KEY ("OrderId") REFERENCES "Order" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_OrderItem_Product_ProductId" FOREIGN KEY ("ProductId") REFERENCES "Product" ("Id") ON DELETE CASCADE
);

CREATE INDEX "IX_Order_DiscountId" ON "Order" ("DiscountId");

CREATE INDEX "IX_Order_UserId" ON "Order" ("UserId");

CREATE INDEX "IX_OrderItem_OrderId" ON "OrderItem" ("OrderId");

CREATE INDEX "IX_OrderItem_ProductId" ON "OrderItem" ("ProductId");

CREATE INDEX "IX_Payment_OrderId" ON "Payment" ("OrderId");

CREATE INDEX "IX_Product_CategoryId" ON "Product" ("CategoryId");

CREATE INDEX "IX_Product_OrderId" ON "Product" ("OrderId");

CREATE INDEX "IX_User_AddressId" ON "User" ("AddressId");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20231120025903_Initial', '7.0.14');

COMMIT;

START TRANSACTION;

ALTER TABLE "User" ADD "AccessFailedCount" integer NOT NULL DEFAULT 0;

ALTER TABLE "User" ADD "ConcurrencyStamp" text NULL;

ALTER TABLE "User" ADD "EmailConfirmed" boolean NOT NULL DEFAULT FALSE;

ALTER TABLE "User" ADD "LockoutEnabled" boolean NOT NULL DEFAULT FALSE;

ALTER TABLE "User" ADD "LockoutEnd" timestamp with time zone NULL;

ALTER TABLE "User" ADD "NormalizedEmail" text NULL;

ALTER TABLE "User" ADD "NormalizedUserName" text NULL;

ALTER TABLE "User" ADD "Password" text NULL;

ALTER TABLE "User" ADD "PasswordHash" text NULL;

ALTER TABLE "User" ADD "PhoneNumber" text NULL;

ALTER TABLE "User" ADD "PhoneNumberConfirmed" boolean NOT NULL DEFAULT FALSE;

ALTER TABLE "User" ADD "SecurityStamp" text NULL;

ALTER TABLE "User" ADD "TwoFactorEnabled" boolean NOT NULL DEFAULT FALSE;

ALTER TABLE "User" ADD "UserName" text NULL;

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20231120042328_AddPasswordToUser', '7.0.14');

COMMIT;

CREATE OR REPLACE FUNCTION updatedAt()
RETURNS TRIGGER AS
$$
BEGIN
    NEW.UpdatedAt := CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER address_updated_at
    BEFORE UPDATE
    ON ecommerce."Address"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER user_updated_at
    BEFORE UPDATE
    ON ecommerce."User"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER category_updated_at
    BEFORE UPDATE
    ON ecommerce."Category"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER product_updated_at
    BEFORE UPDATE
    ON ecommerce."Product"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER payment_updated_at
    BEFORE UPDATE
    ON ecommerce."Payment"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER discount_updated_at
    BEFORE UPDATE
    ON ecommerce."Discount"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER order_updated_at
    BEFORE UPDATE
    ON ecommerce."Order"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();

CREATE TRIGGER order_item_updated_at
    BEFORE UPDATE
    ON ecommerce."OrderItem"
    FOR EACH ROW
    WHEN (OLD.* IS DISTINCT FROM NEW.*)
EXECUTE FUNCTION updatedAt();
